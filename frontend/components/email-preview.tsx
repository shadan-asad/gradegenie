"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Loader2, Mail, Check } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { sendEmail, parseEmailList } from "@/lib/email-service"
import { convertMarkdownToHtml } from "@/lib/markdown-utils"

interface EmailPreviewProps {
  assignment: string
  rubric: string
  title?: string
  course?: string
}

export function EmailPreview({ assignment, rubric, title = "Assignment", course = "Course" }: EmailPreviewProps) {
  const { toast } = useToast()
  const [emailSubject, setEmailSubject] = useState(`${title} - ${course}`)
  const [emailMessage, setEmailMessage] = useState(`Dear Student,

I'm sharing the details for our upcoming ${title} for ${course}. Please find the assignment instructions and grading rubric below.

Please let me know if you have any questions.

Best regards,
Your Instructor`)
  const [emailAddresses, setEmailAddresses] = useState("")
  const [isSending, setIsSending] = useState(false)
  const [sent, setSent] = useState(false)

  const handleSendEmail = async () => {
    const recipients = parseEmailList(emailAddresses)

    if (recipients.length === 0) {
      toast({
        title: "No valid email addresses",
        description: "Please enter at least one valid email address.",
        variant: "destructive",
      })
      return
    }

    setIsSending(true)

    try {
      // Create HTML email content
      const htmlContent = `
        <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto;">
          <div style="white-space: pre-line; margin-bottom: 20px;">${emailMessage}</div>
          
          <div style="margin-top: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px;">
            <h2 style="color: #2e7d32; border-bottom: 1px solid #eee; padding-bottom: 10px;">Assignment Instructions</h2>
            ${convertMarkdownToHtml(assignment)}
            
            <h2 style="color: #2e7d32; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-top: 30px;">Grading Rubric</h2>
            ${convertMarkdownToHtml(rubric)}
          </div>
          
          <div style="margin-top: 30px; font-size: 12px; color: #666; text-align: center;">
            <p>Generated by GradeGenie â€¢ ${new Date().toLocaleDateString()}</p>
          </div>
        </div>
      `

      // Send email
      const result = await sendEmail({
        to: recipients,
        subject: emailSubject,
        html: htmlContent,
        text: `${emailMessage}\n\n${assignment}\n\n${rubric}`,
        from: { email: "noreply@gradegenie.com", name: "GradeGenie" },
      })

      if (result.success) {
        toast({
          title: "Email sent successfully",
          description: `Assignment sent to ${recipients.length} recipient${recipients.length > 1 ? "s" : ""}.`,
        })
        setSent(true)
      } else {
        throw new Error(result.message)
      }
    } catch (error) {
      toast({
        title: "Failed to send email",
        description: error.message || "An error occurred while sending the email.",
        variant: "destructive",
      })
    } finally {
      setIsSending(false)
    }
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Email Assignment to Students</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="email-to">Recipients</Label>
          <Textarea
            id="email-to"
            placeholder="student1@example.com, student2@example.com, student3@example.com"
            value={emailAddresses}
            onChange={(e) => setEmailAddresses(e.target.value)}
            disabled={isSending || sent}
            rows={2}
          />
          <p className="text-xs text-muted-foreground">Enter multiple email addresses separated by commas.</p>
        </div>

        <div className="space-y-2">
          <Label htmlFor="email-subject">Subject</Label>
          <Input
            id="email-subject"
            value={emailSubject}
            onChange={(e) => setEmailSubject(e.target.value)}
            disabled={isSending || sent}
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="email-message">Message</Label>
          <Textarea
            id="email-message"
            value={emailMessage}
            onChange={(e) => setEmailMessage(e.target.value)}
            disabled={isSending || sent}
            rows={6}
          />
        </div>

        <div className="rounded-md border p-4 bg-muted/50">
          <h3 className="text-sm font-medium mb-2">Email will include:</h3>
          <ul className="list-disc pl-5 space-y-1 text-sm">
            <li>Your message above</li>
            <li>Complete assignment instructions</li>
            <li>Grading rubric</li>
          </ul>
        </div>
      </CardContent>
      <CardFooter>
        {sent ? (
          <div className="w-full flex items-center justify-center text-green-600">
            <Check className="mr-2 h-5 w-5" />
            <span>Email sent successfully!</span>
          </div>
        ) : (
          <Button
            className="w-full"
            onClick={handleSendEmail}
            disabled={isSending || !emailAddresses.trim() || !emailSubject.trim()}
          >
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending Email...
              </>
            ) : (
              <>
                <Mail className="mr-2 h-4 w-4" />
                Send Email
              </>
            )}
          </Button>
        )}
      </CardFooter>
    </Card>
  )
}
