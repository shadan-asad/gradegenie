"use client"

import { useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Download, Printer } from "lucide-react"

interface AssignmentPDFPreviewProps {
  assignment: string
  rubric: string
  title?: string
  course?: string
}

export function AssignmentPDFPreview({
  assignment,
  rubric,
  title = "Assignment",
  course = "Course",
}: AssignmentPDFPreviewProps) {
  const contentRef = useRef<HTMLDivElement>(null)

  const handlePrint = () => {
    const printWindow = window.open("", "_blank")
    if (printWindow && contentRef.current) {
      printWindow.document.write(`
        <html>
          <head>
            <title>${title} - ${course}</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              h1, h2, h3 {
                color: #2e7d32;
              }
              .page-break {
                page-break-before: always;
              }
              table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
              }
              th, td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
              }
              th {
                background-color: #f2f2f2;
              }
              .header {
                text-align: center;
                margin-bottom: 30px;
              }
              .footer {
                text-align: center;
                margin-top: 30px;
                font-size: 12px;
                color: #666;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>${title}</h1>
              <p>${course}</p>
            </div>
            ${contentRef.current.innerHTML}
            <div class="footer">
              <p>Generated by GradeGenie â€¢ ${new Date().toLocaleDateString()}</p>
            </div>
          </body>
        </html>
      `)
      printWindow.document.close()
      printWindow.focus()
      setTimeout(() => {
        printWindow.print()
      }, 250)
    }
  }

  return (
    <Card className="w-full">
      <CardContent className="p-6">
        <div className="flex justify-end space-x-2 mb-4">
          <Button variant="outline" onClick={handlePrint}>
            <Printer className="mr-2 h-4 w-4" />
            Print / Save as PDF
          </Button>
          <Button>
            <Download className="mr-2 h-4 w-4" />
            Download
          </Button>
        </div>

        <div ref={contentRef} className="prose max-w-none">
          <div className="assignment-content">
            <h1>{title}</h1>
            <div
              dangerouslySetInnerHTML={{
                __html: assignment
                  .replace(/\n\n/g, "</p><p>")
                  .replace(/\n/g, "<br />")
                  .replace(/^(.+)$/gm, "<p>$1</p>")
                  .replace(/<p>#+\s(.+)<\/p>/g, (match, content) => {
                    const level = match.match(/#+/)[0].length
                    return `<h${level}>${content}</h${level}>`
                  })
                  .replace(/<p>-\s(.+)<\/p>/g, "<li>$1</li>")
                  .replace(/<li>(.+)<\/li>/g, "<ul><li>$1</li></ul>")
                  .replace(/<\/ul><ul>/g, ""),
              }}
            />
          </div>

          <div className="page-break"></div>

          <div className="rubric-content">
            <h1>Grading Rubric</h1>
            <div
              dangerouslySetInnerHTML={{
                __html: rubric
                  .replace(/\n\n/g, "</p><p>")
                  .replace(/\n/g, "<br />")
                  .replace(/^(.+)$/gm, "<p>$1</p>")
                  .replace(/<p>#+\s(.+)<\/p>/g, (match, content) => {
                    const level = match.match(/#+/)[0].length
                    return `<h${level}>${content}</h${level}>`
                  })
                  .replace(/<p>\|(.+)\|<\/p>/g, (match, content) => {
                    const cells = content.split("|").map((cell) => cell.trim())
                    const isHeader = cells.some((cell) => cell.includes("--"))

                    if (isHeader) {
                      return "" // Skip separator row
                    }

                    if (cells[0] === "" && cells[cells.length - 1] === "") {
                      // This is a table row
                      const cellsHtml = cells
                        .slice(1, -1)
                        .map((cell) => {
                          return `<td>${cell}</td>`
                        })
                        .join("")

                      return `<tr>${cellsHtml}</tr>`
                    }

                    return match
                  })
                  .replace(/<p>\|(.+)\|<\/p>\s*<tr>/g, (match, content) => {
                    const cells = content.split("|").map((cell) => cell.trim())

                    if (cells[0] === "" && cells[cells.length - 1] === "") {
                      // This is a table header
                      const headerCells = cells
                        .slice(1, -1)
                        .map((cell) => {
                          return `<th>${cell}</th>`
                        })
                        .join("")

                      return `<table><thead><tr>${headerCells}</tr></thead><tbody><tr>`
                    }

                    return match
                  })
                  .replace(/<\/tr>\s*(?!<tr|<\/tbody>)/g, "</tr></tbody></table>"),
              }}
            />
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
